# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *


class Ui_Settings(QMainWindow):
    Signal_background = pyqtSignal(int)
    Signal_textBrowser = pyqtSignal(int)
    Signal_model = pyqtSignal(int)
    Signal_Algorithm = pyqtSignal(int)
    Signal_AddofFigure = pyqtSignal(str)
    Signal_Opacity = pyqtSignal(int)
    address = 'D:/Grade_3.1/DS/project/result'

    def __init__(self):
        """

        :rtype: object
        """
        super(Ui_Settings, self).__init__()
        self.setupUi(self)
        self.getConfig()

    def setupUi(self, Settings):
        Settings.setObjectName("Settings")
        Settings.resize(380, 536)
        # Settings.setWindowFlags(Qt.WindowStaysOnTopHint)      # 始终显示在最前

        self.BackGroundBox = QGroupBox(Settings)
        self.BackGroundBox.setGeometry(QRect(10, 10, 360, 80))
        self.BackGroundBox.setObjectName("BackGroundBox")

        self.layoutWidget_2 = QWidget(self.BackGroundBox)
        self.layoutWidget_2.setGeometry(QRect(10, 30, 341, 31))
        self.layoutWidget_2.setObjectName("layoutWidget_2")

        self.BackGroundLayout = QHBoxLayout(self.layoutWidget_2)
        self.BackGroundLayout.setContentsMargins(0, 0, 0, 0)
        self.BackGroundLayout.setObjectName("BackGroundLayout")

        self.NoBackGround = QRadioButton(self.layoutWidget_2)
        self.NoBackGround.setObjectName("NoBackGround")
        self.NoBackGround.clicked.connect(self.slot_bg)
        self.BackGroundLayout.addWidget(self.NoBackGround)

        self.dusk = QRadioButton(self.layoutWidget_2)
        self.dusk.setObjectName("dusk")
        self.dusk.clicked.connect(self.slot_bg)
        self.BackGroundLayout.addWidget(self.dusk)

        self.sun = QRadioButton(self.layoutWidget_2)
        self.sun.setObjectName("sun")
        self.sun.clicked.connect(self.slot_bg)
        self.BackGroundLayout.addWidget(self.sun)

        self.DefaultBox = QGroupBox(Settings)
        self.DefaultBox.setGeometry(QRect(10, 100, 360, 80))
        self.DefaultBox.setObjectName("DefaultBox")

        self.layoutWidget = QWidget(self.DefaultBox)
        self.layoutWidget.setGeometry(QRect(10, 40, 341, 21))
        self.layoutWidget.setObjectName("layoutWidget")

        self.DefaultLayout = QHBoxLayout(self.layoutWidget)
        self.DefaultLayout.setContentsMargins(0, 0, 0, 0)
        self.DefaultLayout.setObjectName("DefaultLayout")

        self.tsp = QRadioButton(self.layoutWidget)
        self.tsp.setObjectName("tsp")
        self.tsp.clicked.connect(self.slot_model)
        self.DefaultLayout.addWidget(self.tsp)

        # self.tspwr = QRadioButton(self.layoutWidget)
        # self.tspwr.setObjectName("tspwr")
        # self.tspwr.clicked.connect(self.slot_model)
        # self.DefaultLayout.addWidget(self.tspwr)

        self.byorder = QRadioButton(self.layoutWidget)
        self.byorder.setObjectName("byorder")
        self.byorder.clicked.connect(self.slot_model)
        self.DefaultLayout.addWidget(self.byorder)

        self.AlgorithmBox = QGroupBox(Settings)
        self.AlgorithmBox.setGeometry(QRect(10, 190, 360, 80))
        self.AlgorithmBox.setObjectName("AlgorithmBox")

        self.widget = QWidget(self.AlgorithmBox)
        self.widget.setGeometry(QRect(10, 40, 341, 21))
        self.widget.setObjectName("widget")

        self.AlgorithmLayout = QHBoxLayout(self.widget)
        self.AlgorithmLayout.setContentsMargins(0, 0, 0, 0)
        self.AlgorithmLayout.setObjectName("AlgorithmLayout")

        self.AutoSelect = QRadioButton(self.widget)
        self.AutoSelect.setObjectName("AutoSelect")
        self.AutoSelect.clicked.connect(self.slot_Algorithm)
        self.AlgorithmLayout.addWidget(self.AutoSelect)

        self.GA = QRadioButton(self.widget)
        self.GA.setObjectName("GA")
        self.GA.clicked.connect(self.slot_Algorithm)

        self.AlgorithmLayout.addWidget(self.GA)

        self.DP = QRadioButton(self.widget)
        self.DP.setObjectName("DP")
        self.DP.clicked.connect(self.slot_Algorithm)

        self.AlgorithmLayout.addWidget(self.DP)

        self.Others = QGroupBox(Settings)
        self.Others.setGeometry(QRect(10, 280, 361, 131))  # 起点x、起点y、宽、高
        self.Others.setObjectName("Others")

        self.widget = QWidget(self.Others)
        self.widget.setGeometry(QRect(20, 21, 104, 43))
        self.widget.setObjectName("widget")
        self.verticalLayout = QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.showtb = QCheckBox(self.widget)
        self.showtb.setObjectName("showtb")
        self.showtb.toggled.connect(self.slot_tb)
        self.verticalLayout.addWidget(self.showtb)

        self.TipofOpacity = QLabel(self.Others)
        self.TipofOpacity.setGeometry(QRect(20, 70, 91, 16))
        self.TipofOpacity.setObjectName("TipofOpacity")

        self.BubbleOpacity = QSlider(self.Others)
        self.BubbleOpacity.setGeometry(QRect(20, 90, 101, 22))
        self.BubbleOpacity.setOrientation(Qt.Horizontal)
        self.BubbleOpacity.setObjectName("BubbleOpacity")
        self.BubbleOpacity.setMinimum(0)
        self.BubbleOpacity.setMaximum(100)
        self.BubbleOpacity.setValue(50)
        self.BubbleOpacity.setTickInterval(10)
        self.BubbleOpacity.setTickPosition(QSlider.TicksBelow)
        self.BubbleOpacity.valueChanged.connect(self.ChangeOpacity)

        self.opacity_value = QLabel(self.Others)
        self.opacity_value.setGeometry(QRect(130, 90, 72, 15))
        self.opacity_value.setObjectName("opacity_value")
        self.opacity_value.setText(str(self.BubbleOpacity.value()))

        self.ChangeAdd = QPushButton(Settings)
        self.ChangeAdd.setGeometry(QRect(10, 420, 101, 35))
        self.ChangeAdd.clicked.connect(self.ChangeAddress)
        self.ChangeAdd.setObjectName("ChangeAdd")

        self.Add_text = QLabel(Settings)
        self.Add_text.setGeometry(QRect(120, 420, 255, 35))
        font = QFont()
        font.setFamily("微软雅黑Light")
        self.Add_text.setFont(font)
        self.Add_text.setText(self.address)
        self.Add_text.setObjectName("Add")

        self.Confirm = QPushButton(Settings)
        self.Confirm.setGeometry(QRect(110, 470, 141, 51))
        self.Confirm.setObjectName("Confirm")
        self.Confirm.clicked.connect(self.slot_confirm)

        self.retranslateUi(Settings)
        QMetaObject.connectSlotsByName(Settings)

    def retranslateUi(self, Settings):
        _translate = QCoreApplication.translate
        Settings.setWindowTitle(_translate("Settings", "Settings"))

        self.BackGroundBox.setTitle(_translate("Settings", "背景图片"))
        self.NoBackGround.setText(_translate("Settings", "无背景"))
        self.dusk.setText(_translate("Settings", "落日余晖"))
        self.sun.setText(_translate("Settings", "阳光明媚"))

        self.DefaultBox.setTitle(_translate("Settings", "导航模式"))
        self.tsp.setText(_translate("Settings", "TSP"))
        # self.tspwr.setText(_translate("Settings", "TSP without return"))
        self.byorder.setText(_translate("Settings", "By Order"))

        self.Others.setTitle(_translate("Settings", "其他"))
        self.showtb.setText(_translate("Settings", "显示文字框"))
        self.Confirm.setText(_translate("Settings", "确定更改"))

        self.AlgorithmBox.setTitle(_translate("Settings", "算法"))
        self.DP.setText(_translate("Settings", "动态规划"))
        self.GA.setText(_translate("Settings", "遗传算法"))
        self.AutoSelect.setText(_translate("Settings", "智能选择"))
        self.ChangeAdd.setText(_translate("Settings", "存储路径更改"))

        self.TipofOpacity.setText(_translate("Settings", "气泡透明度："))

    def slot_bg(self):
        if self.NoBackGround.isChecked():
            self.Signal_background.emit(0)
        elif self.dusk.isChecked():
            self.Signal_background.emit(1)
        elif self.sun.isChecked():
            self.Signal_background.emit(2)

    def slot_tb(self):
        if self.showtb.isChecked():
            self.Signal_textBrowser.emit(1)
        else:
            self.Signal_textBrowser.emit(0)

    def slot_model(self):
        if self.tsp.isChecked():
            self.Signal_model.emit(0)
        # elif self.tspwr.isChecked():
        #     self.Signal_model.emit(1)
        elif self.byorder.isChecked():
            self.Signal_model.emit(2)

    def slot_Algorithm(self):
        if self.AutoSelect.isChecked():
            self.Signal_Algorithm.emit(0)
        elif self.GA.isChecked():
            self.Signal_Algorithm.emit(1)
        elif self.DP.isChecked():
            self.Signal_Algorithm.emit(2)

    def ChangeAddress(self):
        m = QFileDialog.getExistingDirectory(None, "选取文件夹", self.address)
        if m != '':
            self.address = m
            self.Add_text.setText(m)
            self.Signal_AddofFigure.emit(self.address)

    def ChangeOpacity(self):
        self.opacity_value.setText(str(self.BubbleOpacity.value()))
        self.Signal_Opacity.emit(self.BubbleOpacity.value())

    def slot_confirm(self):
        reply = QMessageBox.information(self, '确认', '是否更改默认参数设置？', QMessageBox.Yes | QMessageBox.Cancel,
                                        QMessageBox.Yes)
        settings = []
        if reply == QMessageBox.Yes:
            if self.NoBackGround.isChecked():
                settings.append('0')
            elif self.dusk.isChecked():
                settings.append('1')
            elif self.sun.isChecked():
                settings.append('2')

            if self.tsp.isChecked():
                settings.append('0')
            # elif self.tspwr.isChecked():
            #     settings.append('1')
            elif self.byorder.isChecked():
                settings.append('2')

            if self.AutoSelect.isChecked():
                settings.append('0')
            elif self.GA.isChecked():
                settings.append('1')
            elif self.DP.isChecked():
                settings.append('2')

            if self.showtb.isChecked():
                settings.append('1')
            else:
                settings.append('0')

            settings.append(self.address)

            settings.append(str(self.BubbleOpacity.value()))

            with open("config.txt", 'w') as f:
                for i in settings:
                    f.write(i)
                    f.write(' ')

        self.close()

    def getConfig(self):
        with open("config.txt") as f:
            text = f.read().split(' ')

        if text[0] == '0':
            self.NoBackGround.setChecked(True)
        elif text[0] == '1':
            self.dusk.setChecked(True)
        elif text[0] == '2':
            self.sun.setChecked(True)

        if text[1] == '0':
            self.tsp.setChecked(True)
        # elif text[1] == '1':
        #     self.tspwr.setChecked(True)
        elif text[1] == '2':
            self.byorder.setChecked(True)

        if text[2] == '0':
            self.AutoSelect.setChecked(True)
        elif text[2] == '1':
            self.GA.setChecked(True)
        elif text[2] == '2':
            self.DP.setChecked(True)

        if text[3] == '1':
            self.showtb.setChecked(True)

        self.Add_text.setText(text[4])
        self.address = text[4]

        self.opacity_value.setText(text[5])
        self.BubbleOpacity.setValue(int(text[5]))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = Ui_Settings()
    win.show()
    app.exit(app.exec_())
